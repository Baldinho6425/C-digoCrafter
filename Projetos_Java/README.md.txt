### Desafio de Desenvolvimento Full Stack: Sistema de Gerenciamento de Tarefas (To-Do List)

#### Objetivo:
Desenvolver uma aplica√ß√£o full stack de gerenciamento de tarefas (To-Do List) com funcionalidades b√°sicas de CRUD (Create, Read, Update, Delete). A aplica√ß√£o deve ser composta por um backend em Java (utilizando Eclipse), um frontend em React (utilizando VSCode) e um banco de dados MySQL para armazenamento dos dados.

#### Requisitos T√©cnicos:
1. **Backend (Java - Eclipse):**
   - Utilizar Spring Boot para criar a API RESTful.
   - Criar endpoints para as opera√ß√µes de CRUD:
     - `GET /tasks` - Listar todas as tarefas.
     - `GET /tasks/{id}` - Obter uma tarefa espec√≠fica por ID.
     - `POST /tasks` - Criar uma nova tarefa.
     - `PUT /tasks/{id}` - Atualizar uma tarefa existente.
     - `DELETE /tasks/{id}` - Excluir uma tarefa.
   - Utilizar JPA (Java Persistence API) para a persist√™ncia dos dados no banco de dados MySQL.
   - Configurar o arquivo `application.properties` para conex√£o com o banco de dados MySQL.

2. **Frontend (React - VSCode):**
   - Criar uma interface de usu√°rio simples e responsiva utilizando React.
   - Utilizar componentes funcionais e hooks (useState, useEffect) para gerenciar o estado da aplica√ß√£o.
   - Implementar as seguintes funcionalidades:
     - Listar todas as tarefas.
     - Adicionar uma nova tarefa.
     - Editar uma tarefa existente.
     - Excluir uma tarefa.
   - Utilizar Axios ou Fetch API para consumir a API do backend.
   - Estilizar a aplica√ß√£o utilizando CSS ou uma biblioteca como Bootstrap ou Material-UI.

3. **Banco de Dados (MySQL):**
   - Criar uma tabela `tasks` com os seguintes campos:
     - `id` (INT, PRIMARY KEY, AUTO_INCREMENT)
     - `title` (VARCHAR(255), NOT NULL)
     - `description` (TEXT, NULLABLE)
     - `completed` (BOOLEAN, DEFAULT FALSE)
     - `created_at` (TIMESTAMP, DEFAULT CURRENT_TIMESTAMP)
     - `updated_at` (TIMESTAMP, DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP)
   - Configurar o banco de dados para aceitar conex√µes do backend.

#### Funcionalidades Esperadas:
1. **Listagem de Tarefas:**
   - A aplica√ß√£o deve exibir uma lista de todas as tarefas cadastradas, mostrando o t√≠tulo, descri√ß√£o e status (conclu√≠da ou n√£o).

2. **Adicionar Tarefa:**
   - O usu√°rio deve poder adicionar uma nova tarefa, informando o t√≠tulo e a descri√ß√£o.

3. **Editar Tarefa:**
   - O usu√°rio deve poder editar o t√≠tulo, a descri√ß√£o e o status de uma tarefa existente.

4. **Excluir Tarefa:**
   - O usu√°rio deve poder excluir uma tarefa da lista.

5. **Marcar Tarefa como Conclu√≠da:**
   - O usu√°rio deve poder marcar uma tarefa como conclu√≠da ou desmarc√°-la.

#### Entrega:
- **Backend:** C√≥digo fonte do projeto Spring Boot, incluindo o arquivo `application.properties` configurado para conex√£o com o banco de dados.
- **Frontend:** C√≥digo fonte do projeto React, incluindo os componentes e a l√≥gica de consumo da API.
- **Banco de Dados:** Script SQL para cria√ß√£o da tabela `tasks` e qualquer outra configura√ß√£o necess√°ria.
- **Documenta√ß√£o:** Um README.md explicando como configurar e executar o projeto, tanto localmente quanto em um ambiente de desenvolvimento.

#### B√¥nus:
- Implementar autentica√ß√£o e autoriza√ß√£o (JWT, OAuth2, etc.) para proteger os endpoints da API.
- Adicionar testes unit√°rios e de integra√ß√£o para o backend e frontend.
- Implementar pagina√ß√£o e filtros na listagem de tarefas.
- Deploy da aplica√ß√£o em um servi√ßo de nuvem (Heroku, AWS, etc.).

#### Avalia√ß√£o:
- **Qualidade do C√≥digo:** Organiza√ß√£o, legibilidade, boas pr√°ticas de programa√ß√£o.
- **Funcionalidades:** Todas as funcionalidades devem estar implementadas e funcionando corretamente.
- **Usabilidade:** Interface de usu√°rio intuitiva e responsiva.
- **Documenta√ß√£o:** Clareza e completude da documenta√ß√£o fornecida.

#### Prazo:
- O prazo para entrega do desafio √© de **7 dias** a partir da data de recebimento.

Boa sorte! üöÄ